                                                 ----------
                                                 | DOCKER |  
                                                 ----------
                                                   DAY-5
                                                -------------		
                                                |  CONTENT  | 
                                                -------------
                                            ---> Docker Best practices
                                                -- Minimal images
                                                -- Non root containers
                                                -- Multi stage builds
                                            ---> Docker layers
                                            ---> Docker architecture  
                                            ---> Docker Swarn

======================
DOCKER BEST PRACTICES
=======================
1. minimal images (https://hub.docker.com/layers/library/node/20.18-alpine3.20/images/sha256-d504f23acdda979406cf3bdbff0dff7933e5c4ec183dda404ed24286c6125e60?context=explore)

alpine base image + node js 20 install

docker images are layer based, images are immutable

1. FROM:node --> this will be pulled from docker hub
docker creates a container from 1st instruction and runs 2nd instruction inside it - C1
2. EXPOSE 8080
once 2 nd instruction runs, it will create a image from this container - I1
3. docker creates a container from I1 image, C2
runs 3rd instruction inside C2 container
ENV DB_HOST="mysql"
docker creates image from C2 container that is I2
4. docker creates container from I2 images, i.e C3


Ramesh
-------
FROM node:20.18.0-alpine3.20 --> I1
EXPOSE 8080 -> I2
ENV DB_HOST="mysql" -> I3
RUN addgroup -S expense && adduser -S expense -G expense --> I4

120MB

Suresh
-------
FROM node:20.18.0-alpine3.20
EXPOSE 8080
ENV DB_HOST="mysql"
RUN addgroup -S expense && adduser -S expense -G expense
RUN mkdir expense

Rahim
------
FROM node:20.18.0-alpine3.20
EXPOSE 8080 
ENV DB_HOST="mysql" -> I3
USER expense

frequently changing instructions should be bottom of the dockerfile, we can save build time and memory of the layers

docker images are working based on layers..
every instruction creates intermediate container and run the next instruction inside it
then it saves the container as image layer, intermediate container will be deleted
to run next instruction docker creates intermediate container again from this image
it goes on, at each step intermediate containers are removed
each layer is cached, when you push  it pushes the layers

multi stage builds
------------------
development and running

JDK, JRE
JDK --> Java development kit
JRE --> Java runtine environment
.jar file is the output of build
for nodejs project we get node_modules as build, now we need our code and node_modules

JDK > JRE. JRE is subset of JDK

npm install --> node_modules --> usually creates some cache


it looks like 2 dockerfiles inside 1..

1 dockerfile we use it for build

we copy the output in 2nd dockerfile

we restrict docker for image building, running the images as containers we will use kubernetes

Docker architecture
----------------------
client --> docker command
docker host/daemon --> docker service running

docker run -d -p 80:80 nginx
docker daemon checkes whethe image exist local or not, if exist it will run
if not exist, it will pull registry/hub, create a container out of it, run it and send the output to the client

Docker swarn:
-------------
Docker Swarm, while a powerful orchestration tool, has several limitations compared to alternatives like Kubernetes. Here are some key disadvantages:
1. Limited Features for Large-Scale Orchestration
Docker Swarm lacks the advanced features required for managing large-scale, complex deployments. It offers basic orchestration functionalities but lacks depth in areas such as autoscaling, which Kubernetes natively supports through Horizontal Pod Autoscaling (HPA).
2. Less Community Support and Fewer Integrations
Kubernetes has a large and active community, 
leading to frequent updates, better resources, and more integrations with third-party tools. 
Docker Swarm’s smaller community results in fewer integrations with monitoring, logging, and alerting tools, which are crucial for enterprise-level applications.
3. Basic Load Balancing and Networking Limitations
Docker Swarm’s built-in load balancing is less sophisticated than Kubernetes. For instance, it struggles with managing network policies, particularly in complex setups requiring custom routing or layer 7 (application-level) load balancing.
4. Lower Security and Compliance Features
While Docker Swarm supports TLS for communication between nodes, it lacks the advanced security and compliance features of Kubernetes, such as role-based access control (RBAC) and secrets management, making it less suitable for highly secure environments.
5. Lacks Robust Monitoring and Logging Options
Swarm has limited native options for logging and monitoring, requiring additional setup for tools like Prometheus or Grafana. Kubernetes, in contrast, has an ecosystem with built-in options and a range of third-party integrations for observability.
6. Slower Development and Feature Release Cycle
With Docker’s focus shifting towards Kubernetes, Swarm’s development has slowed. This results in fewer updates and new features, reducing Swarm’s ability to adapt to evolving industry needs.
7. Less Support for Stateful Applications
Docker Swarm is primarily designed for stateless applications. It lacks support for persistent volumes and advanced storage solutions, making it challenging to manage stateful applications requiring persistent storage across nodes.
8. Inflexibility with Persistent Storage Solutions
Docker Swarm’s storage system is not as flexible as Kubernetes’s Persistent Volumes (PV) and Persistent Volume Claims (PVC), making it harder to manage data storage consistently and reliably across nodes in a cluster.
Despite its ease of setup and simplicity, Docker Swarm is more suited for smaller, simpler deployments and falls short in the features required for robust production-grade deployments. Kubernetes, while more complex, offers a far more flexible and scalable orchestration solution.