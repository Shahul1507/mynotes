ungrouped
grouped
group of groups

 inventory.ini
  -----------
192.168.1.1  # ungrouped
192.168.1.2  # ungrouped
192.168.1.3  # ungrouped

[web]         # group
172.31.45.75  

[web:vars]
DURATION="10HRS"
TRAINER="Sivakumar Reddy"

[backend]     # group
192.168.1.4
192.168.1.5
192.168.1.6

[mysql]
192.168.1.7
192.168.1.8
192.168.1.9

[servers:children]  # group of groups
web
backend

[all:vars]     # works for all hosts
ansible_user=ec2-user
ansible_password=DevOps321

====> Run these module to check how ansible picks host data in ansible from inventory.ini 
------------------------------------------------------------------------------------------ 
 
3.84.29.94 | 172.31.86.183 | t2.micro | https://github.com/Shahul1507/ansible-02.git
[ ec2-user@ip-172-31-86-183 ~/ansible-02 ]$ ansible -i inventory.ini ungrouped --list-hosts
  hosts (3):
    192.168.1.1
    192.168.1.2
    192.168.1.3


3.84.29.94 | 172.31.86.183 | t2.micro | https://github.com/Shahul1507/ansible-02.git
[ ec2-user@ip-172-31-86-183 ~/ansible-02 ]$ ansible -i inventory.ini backend --list-hosts
  hosts (3):
    192.168.1.4
    192.168.1.5
    192.168.1.6

3.84.29.94 | 172.31.86.183 | t2.micro | https://github.com/Shahul1507/ansible-02.git
[ ec2-user@ip-172-31-86-183 ~/ansible-02 ]$ ansible -i inventory.ini mysql --list-hosts
  hosts (3):
    192.168.1.7
    192.168.1.8
    192.168.1.9

3.84.29.94 | 172.31.86.183 | t2.micro | https://github.com/Shahul1507/ansible-02.git
[ ec2-user@ip-172-31-86-183 ~/ansible-02 ]$ ansible -i inventory.ini servers --list-hosts
  hosts (4):
    172.31.45.75
    192.168.1.4
    192.168.1.5
    192.168.1.6

3.84.29.94 | 172.31.86.183 | t2.micro | https://github.com/Shahul1507/ansible-02.git
[ ec2-user@ip-172-31-86-183 ~/ansible-02 ]$ ansible -i inventory.ini all  --list-hosts
  hosts (11):
    192.168.1.1
    192.168.1.2
    192.168.1.3
    localhost
    192.168.1.7
    192.168.1.8
    192.168.1.9
    172.31.45.75
    192.168.1.4
    192.168.1.5
    192.168.1.

-----------	
DATA TYPES:
-----------
13-data-types.yaml
-------------------
- name: devops course informatiom
  hosts: local
  connection: local #for localhost
  vars:
    course: "Devops with AWS" #string
    duration: "120 Hrs"
    topics: #list
    - Linux
    - Shell
    - Ansible
    - Terraform
    - AWS
    - K8
    live: true #boolean
    tools: #map/dictionary (Key-value pairs) 
     ci: jenkins  # ci - key & jenkins -value
     cm: ansible
     cloud: aws
     aws:
     - I am
     - S3
  tasks:
  - name: print the course information
    ansible.builtin.debug:
      msg: "Hi,I am learning {{ course }},with duration {{ duration }},topics are: {{ topics }},and live: {{ live }},tools are: {{ tools}}"

Syntax:ansible-playbook -i inventory.ini 13-data-types.yaml 
Output:(ok: [localhost] => {
    "msg": "Hi,I am learning Devops with AWS,with duration 120 Hrs,topics are: ['Linux', 'Shell', 'Ansible', 'Terraform', 'AWS', 'K8'],and live: True,tools are: {'ci': 'jenkins', 'cm': 'ansible', 'cloud': 'aws', 'aws': ['I am', 'S3']}"
})

CONDITIONS:
-----------
14-conditions.yaml
------------------
	- name: Check if a number is less than or greater than a specified value
	  hosts: localhost
	  vars:
		number_to_check: 10
		comparison_value: 20

	  tasks:
		- name: Check if number is less than comparison value
		  debug:
			msg: "The number {{ number_to_check }} is less than {{ comparison_value }}."
		  when: number_to_check < comparison_value

		- name: Check if number is greater than comparison value
		  debug:
			msg: "The number {{ number_to_check }} is greater than or equal to {{ comparison_value }}."
		  when: number_to_check >= comparison_value
		  
syntax: ansible-playbook 14-conditions.yaml

output:ok: [localhost] => {
    "msg": "The number 10 is less than 20."

15-conditions-createuser.yaml
------------------------------	
	- name: create user
	  hosts: web
	  become: yes
	  tasks:
	  - name: check user exist or not
		ansible.builtin.command: id expense
		register: USER #here USER is a variable that gets output from above command
		ignore_errors: True

	  - name: print the user information
		ansible.builtin.debug:
		  msg: "user info: {{ USER }}"

	  - name: create user
		ansible.builtin.command: useradd expense
		when: USER.rc != 0		  
		
gathering facts {{ ansible_fact }}
----------------
16-gather-facts
----------------
	- name: gathering facts
	  hosts: localhost
	  become: yes
	  tasks:
	  - name: print the facts
		ansible.builtin.debug:
		  msg: "{{ ansible_facts }}"
		  
syntax:	ansible-playbook 16-gather-facts.yaml
	  

install nginx based on facts
-----------------------------	
redhat --> ansible.builtin.dnf
ubuntu -->  ansible.builtin.apt

17-install-nginx-facts.yaml (refer: (facts.json)to read the output of os family)
---------------------------
	- name: Install nginx
	  hosts: localhost
	  become: yes
	  tasks:
	  - name: print the stat
		ansible.builtin.debug:
		  msg: "{{ ansible_facts }}"
	  
	  - name: Install nginx if RedHat
		ansible.builtin.dnf:
		  name: nginx
		  state: present
		when: ansible_os_family == "RedHat"

	  - name: Install nginx if Debian
		ansible.builtin.apt:         
		  name: nginx
		  state: present
		when: ansible_os_family == "Debian"  	  
		  
syntax:	ansible-playbook 17-install-nginx-facts.yaml		

LOOPS:
-----
18-loops.yaml
-------------
	- name: print the names
	  hosts: localhost
	  tasks:
	  - name: print names
		ansible.builtin.debug:
		  msg: "Hello {{ item }}"
		loop:
		- Ramesh
		- Suresh
		- Raju
		- Raheem
		- Robert    
		
		
syntax:	ansible-playbook 18-loops.yaml

19-loops-install.yaml
---------------------
	- name: print the packages
	  hosts: localhost
	  become: yes
	  tasks:
	  - name: install the packages
		ansible.builtin.package:
		  name: "{{ item }}"
		  state: present
		loop:
		- mysql
		- nginx
		- postfix
		- httpd
syntax:	ansible-playbook 19-install-loops.yaml	  

20-install-packages.yaml
------------------------
	- name: install and remove the packages
	  hosts: localhost
	  become: yes
	  tasks:
	  - name: Install the packages
		ansible.builtin.package:
		  name: "{{ item.name }}"
		  state: "{{ item.state }}"
		loop:
		- { name: 'mysql', state: 'present' }
		- { name: 'nginx', state: 'absent' }  
		- { name: 'postfix', state: 'present' }  
		- { name: 'httpd', state: 'present' }   
		
syntax:	ansible-playbook 20-install-packages.yaml   		