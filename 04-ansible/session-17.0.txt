ansible inventory
-------------------
ungrouped
grouped
group of groups

 inventory.ini
  -----------
192.168.1.1  # ungrouped
192.168.1.2  # ungrouped
192.168.1.3  # ungrouped

[web]         # group
172.31.45.75  

[web:vars]
DURATION="10HRS"
TRAINER="Sivakumar Reddy"

[backend]     # group
192.168.1.4
192.168.1.5
192.168.1.6

[mysql]
192.168.1.7
192.168.1.8
192.168.1.9

[servers:children]  # group of groups
web
backend

[all:vars]     # works for all hosts
ansible_user=ec2-user
ansible_password=DevOps321

data types     (string --> text ;int, float, double, decimal, long,etc --> number ;boolean --> true/false ;list ;map)
-------------

[ --> list
{ --> map/dictionary

Ansible is developed using python language

hosts: web --> target IP under web group
--->[local]    #(to run the script within server)
	localhost
conditions (when)
----------------------
--write a playbook to check if number is less than 10 or not
--In ansible, "when" condition is used instead of "if"
--"when" to decide whether a task/module should run or not

create expense user

1. check expense user already exist or not
2. if exist, don't create
3. if not exist create

id expense --> if exit staus is 0, dont' create

ansible can't gaurentee module exists for everything...we can use direct commands if module not available

ansible.builtin.command: id expense
register:USER #here USER is a variable that gets output from above command

Int: Error Handling --> Handle the errors
     ------------------------------------

if error comes --> ignore errors

 {
 'changed': True, 
 'stdout': '', 
 'stderr': 'id: ‘expense’: no such user', 
 'rc': 1, 
 'cmd': ['id', 'expense'], 
 'start': '2024-09-03 02:30:45.148688', 
 'end': '2024-09-03 02:30:45.155066', 
 'delta': '0:00:00.006378', 
 'failed': True, 
 'msg': 'non-zero return code', 
 'stdout_lines': [], 
 'stderr_lines': ['id: ‘expense’: no such user']
 }
gathering facts:{{ ansible_fact }}
----------------
Facts == Variables(we call facts and variables as same )

Ansible, before connecting to the servers/hosts it will collect entire information. so that it can take decisions based on that information

install nginx based on facts
-----------------------------
redhat --> ansible.builtin.dnf
ubuntu -->  ansible.builtin.apt

ansible.builtin.package --> package install nginx -y

loops
------------
item --> reserved keyword

functions/filters
--------------------
     Ansible allow user to write custom functions (using python language)

     But 90% of cases we use built-in ansible functions in project.

     https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_filters.html

     Ansible filters are used to manipulate data within your playbooks. (Pipe |)

     
Command vs Shell
------------------
     Use command when you need to run simple commands that do not require shell features. It is more secure and should be preferred for basic tasks.
     
     Use shell when you need to leverage shell features like pipes, redirection, or environment variables. It provides more flexibility but should be used with caution due to potential security risks
     
     ansible.builtin.command 
     ansible.builtin.shell     

     example:
     --------
          - name: check the process
          ansible.builtin.shell: ps -ef | grep ssh
          register: output

          - name: check the process
          ansible.builtin.command: ps -ef | grep ssh  # will fail as pipe is there.
          register: output
