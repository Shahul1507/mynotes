								------------- 
								| TERRAFORM |  
								-------------
								    DAY-2
							    -------------		
								| CONTENTS	|
								-------------													
Note-Link: (https://vijaycodes.hashnode.dev/fundamentals-of-terraform)

Variables
Conditions
Data types
loops
functions
------------
Variables    (Link:https://developer.hashicorp.com/terraform/language/values/variables)
------------
--> variable is container that holds value... (x=1, y=2 -- x & Y are variables and 1 & 2 are values)

			Example:
			---------
			shell script:   PERSON=Ramesh

			ansible:        vars:
							   PERSON: Ramesh
				
			terraform:	    variable "person"{
								default = "Ramesh"
								type = string
							}
Steps: (terraform/variables/Variable.tf)
------							
---> create folder under terraform in workspace(vs code)
					terraform 
					- variables
					  -ec2.tf
					  -provider.tf (it should be present in all folders)
					  -variables.tf            
--> ref:(session-23.1(variable.tf))
--> ref:(session-23.2(ec2.tf)) # updated with variable declaration
--> git commit( git add . ; git commit -m "terraform"; git push origin main)
--> cd variables
--> terraform initerr
--> terraform plan
--> terraform apply -auto-approve


Datatypes:
---------
string
number
list
map
boolean

[ --> list is represented
{ --> map is represented

Tagging Strategy
----------------------
Project     : Expense          
Component/Module : Mysql
				   Backend
				   frontend
Environment	: DEV
			  PROD					
									  
Example of Tagging strategy:
							#tags
							variable "tags" {
							  type        = map
							  default     = {
								 Name = "backend"
								 project = "expense"
								 component = "backend"
								 environment = "DEV"
								 terraform = "true"
							  } 
							  
							}

terraform.tfvars : (https://spacelift.io/blog/terraform-tfvars)
--------------------
using this file, we can override the default values in variables or else you can set the values also.

terraform.tfvars and default values:
-----------------------------------
1.preference : terraform.tf vars
2.preference : default 

preferences:(Ref. link: https://developer.hashicorp.com/terraform/language/values/variables)
------------
1. command line : 
   -------------
   syntax: (terraform plan -var="image_id=ami-abc123")
   example: (terraform plan -var="instance_type=t3.large")
2. terraform.tfvars
3. environment variables : (t3.large)
   ---------------------
   syntax: (export TF_VAR_image_id=ami-abc123)
   example: (export TF_VAR_instance_type=t3.large)
4. default
-----------
conditions
-----------

if (expression){
	run this if expression is true
}
else{
	run this if expression if false
}

expression ? "run this if true" : "run this if false"

environment is prod t3.small or t3.micro

outputs
-------------------
every resource exports some values, we can take them and create other resources

loops
--------------------
1. count based loop
2. for or for each

count.index --> 0
count.index --> 1
count.index --> 2

functions
--------------------
Terraform has no custom functions, We must use in-built functions

merge --> merges 2 lists

list-1 --> name=siva, course=devops
list-2 --> name=siva, course=terraform, duration=120hr
list-3 --> name=kumar, course=aws
merge(list-1,list-2)

name=siva, course=terraform
name=kumar, course=aws, duration=120

3 ec2 instances
r53 records

mysql.daws81s.online --> pvt ip
backend.daws81s.online --> pvt ip
daws81s.online --> public ip

without .gitigore

git add git commit git push

500Mb file push

