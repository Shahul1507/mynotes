Recap
----------------
Linux Servers
3 tier --> 

Shell scripting
Ansible

Terraform --> IaaC ("Infrastructure as a code" developed by Hashicorp.)
----------------
EC2
R53
IAM users

Manual Infra
-----------------
Everything in console.... by mistake if someone edit wrong, then app will go down...30min-1hr
application restore back to previous stage if something goes wrong

Version control

Consistent Infra --> All environment configs and infra should be some..

CRUD --> Create infra, read, update, deleting the infra

Inventory/resource management --> If you see the terraform script, you know what are the services you are using

Cost optimisation --> creation in 5min, deletion in 5min

Dependency management --> sg, ec2 instance after creation of all dependencies

Code reuse --> Roles. Modules

Declarative way of creating infra --> You are giving orders to terraform to create infra just by providing right syntax

easy syntax
no sequence
state management --> Terraform can track what it created, can update easily

mysql --> mysqlll


HCL --> Hashicorp configuration language

Download terraform
keep terraform.exe in some folder
edit the environment variables, provide the path

aws configure --> AWS command line install
https://awscli.amazonaws.com/AWSCLIV2.msi

Resources

Terraform --> AWS, AZure, GCP, Alibaba, Digital Ocean, etc. GitHub, Networking, etc. These are the providers
----------
variables
data types
conditions
loops
functions
	data sources
	locals
	outputs
	providers
	provisoners
	
Create EC2 instance through terraform
-------------------------------------
--> create a terrafoem repo in Git Hub
--> git clone https://github.com/Shahul1507/terraform.git

terraform file extension is .tf

provider.tf --> where you can declare what provider you are using

AWS provider.tf (vscode-terraform/provider.tf)
----------------
terraform {
  required_providers {
    aws = {
      source = "hashicorp/aws"
      version = "5.67.0"
    }
  }
}

provider "aws" {
  # Configuration options
}

-->Here we need to provide authentication -- this is done by aws configure in git bash
-->region to privider "aws" 
	terraform {
	  required_providers {
		aws = {
		  source = "hashicorp/aws"
		  version = "5.67.0"
		}
	  }
	}

	provider "aws" {
	  # Configuration options
	  region = "us-east-1"
	  
	}

------------------------------------
ec2.tf (vs-code -- terraform/ec2.tf)
------------------------------------
--> to create ec2 instance we need security group
--> security group (https://registry.terraform.io/providers/hashicorp/aws/latest/docs/data-sources/security_group)
--> instance (https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/instance)

HCL Syntax:
-----------
resource "resource-type" "name-of-resource" {
	key = value
}

name
description
ingress mandatory
egress mandatory

ingress --> incoming traffic
egress --> outgoing traffic

while entering cabin you have to scan your ID...while exit the cabin just push the switch

Commands:
-------------
terraform init --> intialise terraform, it will connect with provider and downloads it
keep .gitignore always

terraform plan --> cant create resources. it will just plan

terraform apply --> 

terraform apply -auto-approve

terraform destroy -auto-approve
1.it destroys -ec2instance 
2.it destroys security group  
because ec2 is dependent on security group
---------------------
Creating ec2 instance
---------------------
name
ami
sg-id
instance_type
key_pair