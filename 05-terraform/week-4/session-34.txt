                                    ------------- 
                                    | TERRAFORM |  
                                    -------------
                                        DAY-12
                                    -------------		
                                    | CONTENTS	|
                                    -------------
                                    ---> Stateful  vs Stateless	
                                    ---> RDS Module  (Using Open source Module )
                                    ---> Load Balancing
                                         -- Target groups
                                         -- Listener
                                         -- Rules
                                         -- Health check
                                         -- Auto scaling
                                         
                                                                                


References: 
----------
Note-link: https://vijaycodes.hashnode.dev/optimizing-expense-project-using-terraform

for-code : 
========================
{Stateful  vs Stateless	
========================
what is stateful and stateless ..?
    stateful --> which has a state, i.e. data
    stateless --> which doesn't have a state.

In an expense project which components are stateful and stateless..?
    DB —> stateful because it has data
    Backend, frontend —> stateless, does not maintain any data and does operations based on the instructions.

If a component crashes which has a high impact..?
 -- DB —> impact is high and restoring the state is not easy.
 -- Backend, frontend —> impact is less

How was DB restored and what is the plan if there is a DB crash ..?
 -- DB backup in intervals - hourly, daily weekly backups
 -- restore test - Test whether backups are happening properly or not.   

Data replication -
    Delhi - DB-1 is connected to the application
    Mumbai - DB-2 is not connected to the application but replicates data from DB-1
    If there is a crash in DB-1 due to a natural disaster then the application will be connected to DB-2.

What other database parameters should we consider?
 -- Storage space - We need to increase the storage space when it is running low.
 -- Load balancing - If multiple users are connecting to a single server, we need to implement load balancing by adding additional servers
 -- DB upgrade - upgrading to new DB version.
}
There are many responsibilities for stateful systems like DB than stateless systems

{--> we use "RDS" - (Relational databases)
    -- Which does
       -load balancing,
       -auto storage increment,
       -backups/snapshot
    -- AWS —> search "RDS" —> databases   
}

=======================================
RDS Module - (Using Open source Module ) 
========================================
-->	{Create (expense-infra-dev) folder : 
	------------------------------------
	-->	Copy folders from the https://github.com/daws-81s/expense-terraform-dev
            -- 10-vpc 
               -“provoder.tf “change “backend-s3” - key =”expense-vpc-dev”
            -- 20-sg 
               -“provoder.tf “change “backend-s3” - key =”expense-sg-dev”
            -- 30-bastion 
               -“provoder.tf “change “backend-s3” - key =”expense-sg-dev”
               -is used to connect to MySQL directly.               
    --> create folder
            -- 40-rds
               -provider.tf - change 

{
expense-infra-dev
-------------------

stateful vs stateless

stateful --> which has state, i.e data
stateless --> which don't have state.

DB --> stateful, it keeps track of the data
backend/frontend --> stateless

DB
-------
backup --> hourly, daily, weekly backups
restore test
data replication --> 
DB-1 is connected to application
DB-2 is not connected to application, but replicate data from DB-1

HYD --> DB-1, MUM --> DB-2
storage increment
load balancing
upgrades

RDS --> load balancing, auto storage increment, backups/snapshots, etc..

ExpenseApp1

8.0.35 --> 8.0.36
8.0 --> 8.1 --> 9

rds opensource module

mysql-dev.daws81s.online --> expense.czn6yzxlcsiv.us-east-1.rds.amazonaws.com

snapshot/backup --> destroy --> final snapshot(VPC)

Load Balancing and Auto Scaling
--------------------------------

DM --> Client

work --> UI work --> UI team lead --> team members
Backend work --> Backend team lead --> team members
who is available to work, team lead will assign

team --> target group
team lead --> load balancer
listener and rules --> He is listening for UI work, Backend team lead is listening for backend work
who is available --> health check
members --> servers

if backend server is running we can hit that on 8080, if not running we can't hit


8080, 80 --> servers are listening on these port

http://3.94.106.200/ --> 2XX

LB Listener --> 80 --> nginx --> 80 --> 2 instances --> lb will check which instance is healthy --> randomly 1 server

Auto scaling
------------------
2 members --> 16 hr work
30 hr work --> our HR should recruit new members --> add them to our team

JD --> Launch template(Options to create servers) --> place them inside target group

CPU utilisation --> 75%
}