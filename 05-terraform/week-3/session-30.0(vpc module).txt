										------------- 
										| TERRAFORM |  
										-------------
											DAY-8
										-------------		
										| CONTENTS	|
										-------------	
									---> VPC Module
											-VPC
											-Internet Gateway
											-Subnets
											-Elastic IP
											-NAT gateway
											-Route table and Routes
											-Associations with subnets
References: {
----------
Best Terraform code Practices: https://www.terraform-best-practices.com/naming											
Note-Link: https://vijaycodes.hashnode.dev/terraform-vpc#heading-references	
Note-code: (session-30.1(vpc-module-code).txt)
for-code(git-hub)  : https://github.com/Shahul1507/terraform-aws-vpc.git
                     https://github.com/Shahul1507/vpc-module-test.git
					 
}
The steps to create VPC  (steps are same for any project) {
------------------------------------------------------

STEPS: 1. VPC: Create VPC -> 10.0.0.0/16 --> 2^16 IP address.
		  ----
	   2. Internet Gateway: Create IGW —>associate IGW to VPC.
		  ----------------
	   3. Subnet: create subnets --> Public, private, and DB.
		  ------
		  --> Create database subnets into one group
	   4. Elastic IP
		  ----------
	   5. NAT (Network address transalation)
		  ----
	   6. Route Tables: create route tables 
		  ------------
						-Public --> Internet connection through IGW

						-Private --> NAT, egress connections
                        
						-create routes to route-tables

						-route table associations with subnets																					

}
terraform naming resources (Best Terraform code Practices: https://www.terraform-best-practices.com/naming){
-----------------------------
	1. terraform resource name --> use _, no upper case
	2. dont repeat resource type in name
	3. if only one resource of its type, name it as "main" or "this"
	4. Use '-' inside arguments values and in places where value will be exposed to a human
	5. use plural if mresourcesultiple 
}
Creating VPC with Terraform Module {
------------------------------------	
-->	Create two project folders - (terraform-aws-vpc) and (vpc-module-test)

	-->	Resources will be in -- (terraform-aws-vpc)
	-->	Input variables and execution will be done using the -- (vpc-module-test)
	
}
--> step:1 (create VPC in aws ) {
		(terraform-aws-vpc)={
		--Add file "main.tf" in "terraform-aws-vpc" (https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/vpc)
		--add "variables.tf" file in "terraform-aws-vpc"
				--> vpc_cidr_block —> CIDR address
				--> enable_dns_hostname = true (default its false)
				--> mandatory variables : project_name , environment —> for VPC naming convention		 
				--> optional variables : common_tags , vpc_tags , igw_tags (empty initially)
		--create "locals.tf" in "terraform-aws-vpc" add - (resource_name = "${var.project_name}-${var.environment}")
		--append "main.tf" : add tag information with (“Name = local.resource_name”) 
		--create "outputs.tf" in "terraform-aws-vpc" folder (providing vpc_id to user)
		}
		(vpc-module-demo) {
		--create "provider.tf" in "vpc-module-test" folder
		--create "variables.tf" in "vpc-module-test" add project_name , environment , common_tags information.	
		--create "vpc.tf" in "vpc-module-test" folder
		--create "outputs.tf" in "vpc-module-test" folder
		}

	}
	--terraform init 
	--terraform plan 
	--terraform apply -auto-approve

--> step:2 (create Internet gateway) {
        
	    -- get the IGW resource content from https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/internet_gateway
		-- append "igw " code to "terraform-aws-vpc" folder/main.tf
				-->    # internet gateway
						resource "aws_internet_gateway" "main" {
							vpc_id = aws_vpc.main.id
						
							tags = merge (
							var.common_tags,
							var.igw_tags,
							{
								Name = local.resource_name
							}
							)   
							
						}
		-- append "igw_tags" to terraform-aws-vpc folder/variable.tf
				--> 	variable "igw_tags" {
							default     = {}
						}	 
    }
	--terraform plan 
	--terraform apply -auto-approve
	
--> step:3 (create subnets) {
        -- For high availability, at least two availability zones {

			public subnet —> 1a, 1b —> 10.0.1.0/24 , 10.0.2.0/24
			
			private subnet —> 1a,1b —> 10.0.11.0/24 , 10.0.12.0/24
			
			private subnet —> 1a, 1b —> 10.0.21.0/24 , 10.0.22.0/24
		}
		-- ref-link - (https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/subnet)
		--	Plan for subnet resource 
		    ------------------------{
		    -------------------------
			--	Create public subnet
			--	Availability zones - we need to get the first two zones from the zonal list
			--	update terraform-aws-vpc/variables.tf -
					#Mandatory input from module
					list of two public CIDRs
					list of two private CIDRs
					list of two database CIDRs
					#optional
					public subnet tag
					private subnet tag
					database subnet tag
			--	update terraform-aws-vpc/main.tf with public subnet resource
			--	update module vpc-module-test/variables.tf
					public CIDRs = [“10.0.1.0/24” , “10.0.2.0/24”]
			--	update module vpc-module-test/vpc.tf to pass the public CIDRs to terraform-aws-vpc.
				
			--	Execute and check
				    -Terraform plan
			--	Execute and apply the same plan to private and database subnets.
		}
        -- Create public subnet 
		   ---------------------{	
			--	Availability zones : we need to get the Availability zones and we need to take the first two zones from the list 
				-(https://registry.terraform.io/providers/hashicorp/aws/latest/docs/data-sources/availability_zones)
				
			--	Add "data.tf" in "terraform-aws-vpc" folder and append the below code:
					
			        -->  data "aws_availability_zones" "available" {
						       state = "available"
					       }
			--  Let’s see the output of availability zones
                By appending the below code in "terraform-aws-vpc" folder/outputs.tf
				  
				    -->  output "az_info" {
						   value = data.aws_availability_zones.available
				           }
			--  and appending below code in vpc-module-test/outputs.tf
                    -->  output "az_info" {
						  value = module.vpc.az_info
                           }
			--  execute “terraform plan” 
			     —> we need first two elements from names list below.
				 	-->    + az_info = {
							+ all_availability_zones = null
							+ exclude_names          = null
							+ exclude_zone_ids       = null
							+ filter                 = null
							+ group_names            = [
								+ "us-east-1",
							]
							+ id                     = "us-east-1"
							+ names                  = [
								+ "us-east-1a",
								+ "us-east-1b",
								+ "us-east-1c",
								+ "us-east-1d",
								+ "us-east-1e",
								+ "us-east-1f",
							]
							+ state                  = "available"
							+ timeouts               = null
							+ zone_ids               = [
								+ "use1-az6",
								+ "use1-az1",
								+ "use1-az2",
								+ "use1-az4",
								+ "use1-az3",
								+ "use1-az5",
							]
						   }
			--  Now comment "az_info" variable in "outputs.tf" file in both "terraform-aws-vpc" and "vpc-module-test" as we know how it is printing the output

			--  append below code in "terraform-aws-vpc"/locals.tf to get the first two elements of az_info.names list	 
				    -->  locals{
			                az_names = slice(data.aws_availability_zones.available.names, 0, 2)
		                }
			--  Variables : Append below code to "terraform-aws-vpc" folder/variables.tf to allow 2 valid CIDR from modules			
		            -->  variable "public_subnet_cidrs"{
							type = list
							validation {
								condition = length(var.public_subnet_cidrs) == 2
								error_message = "Please provide 2 valid public subet CIDR"
							}
						}
						
						variable "public_subnet_tags"{
							default = {}
						}
			-- 	Append code to "terraform-aws-vpc" folder/main.tf	
				    -->	resource "aws_subnet" "public" {
							count = length(var.public_subnet_cidrs)
							vpc_id     = aws_vpc.main.id
							cidr_block = var.public_subnet_cidrs[count.index]
							availability_zone = local.az_names[count.index]
						    map_public_ip_on_launch = true
							tags = merge(
							var.common_tags,
							var.public_subnet_tags,
							{
								Name = "${var.project_name}-public-${local.az_names[count.index]}"
							}
							)
						}
			--  append code to "vpc-module-test"/variables.tf
			        --> variable "public_subnet_cidrs" {
						default = ["10.0.1.0/24", "10.0.2.0/24"]
					   }
			--  append code to vpc-module-test/vpc.tf —> public_subnet_cidrs = var.public_subnet_cidrs
			        --> module vpc{
						source = "../terraform-aws-vpc"
						project_name = var.project_name
						environment = var.environment
						common_tags = var.common_tags
						public_subnet_cidrs = var.public_subnet_cidrs
					  }
			--(map_public_ip_on_launch = true) -- append this to public subnet resource. (main.tf)				
					
        }				
		--create private and database subnets
		  ------------------------------------ {
		  Follow the above procedure with " private" and "database" subnet CIDR addresses.	    
	    }
	}
    --terraform plan 
	--terraform apply -auto-approve

     --> Create database subnets into one group {
        ----------------------------------------
		-- We need to create database_subnet_group i.e placing all the database subnets in a group
        -- ref-link :(https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/db_subnet_group)
		
		(--> AWS —> search "RDS" —> subnet groups —>you can see “expense-dev”)
		(terraform-aws-vpn/main.tf)		
			   # DB Subnet group for RDS
				resource "aws_db_subnet_group" "default" {
					name       = local.resource_name
					subnet_ids = aws_subnet.database[*].id
				
					tags = merge(
					var.common_tags,
					var.db_subnet_group_tags,
					{
						Name = local.resource_name
					}
					)
				}
		(terraform-aws-vpn/variable.tf)	
				# db subnet tags
				variable "db_subnet_group_tags" {
					default     = {}
				}
		
	   }		
	--terraform plan 
	--terraform apply -auto-approve

--> step:4 (create Elastic-IP) {
	ref-link: (https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/eip)
    -- create elastic-ip in (terraform-aws-vpc/main.tf)
	    # elastic_ip for NAT
		resource "aws_eip" "vpc" {
			domain   = "vpc"
		}
    }	
--> step:5 (create NAT Gateway) {	
	-- create NAT gateway in (terraform-aws-vpc/main.tf)
	-- ref-link:(https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/nat_gateway)   
			# NAT gateway
			resource "aws_nat_gateway" "main" {
				allocation_id = aws_eip.vpc.id
				subnet_id     = aws_subnet.public[0].id #first subnet
			
				tags = merge(
				var.common_tags,
				var.nat_gateway_tags,
				{
					Name = local.resource_name
				}
				)
				# To ensure proper ordering, it is recommended to add an explicit dependency
				# on the Internet Gateway for the VPC.
				depends_on = [aws_internet_gateway.main]
				}
	-- (terraform-aws-vpn/variable.tf)	
	               # nat_gateway_tags
					variable "nat_gateway_tags" {
					default     = {}
				}		
	}	
    --terraform plan 
	--terraform apply -auto-approve

--> { step:6 (Creating route table) 
	-- create NAT gateway in (terraform-aws-vpc/main.tf)
    -- ref-link: (https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/route_table)
    -- create -route table- in (terraform-aws-vpc/main.tf)   for public,private and database 
	   
	   # Public route table
			resource "aws_route_table" "public" {
				vpc_id = aws_vpc.main.id
			
				tags = merge(
				var.common_tags,
				var.public_route_table_tags,
				{
					Name = "${local.resource_name}-public" #expense-dev-public
				}
				)
				
			}
    -- similarly, create route-table for private and database 
	-- create route-table-tags (terraform-aws-vpc/variable.tf) to public,private and database 
	    
	   # public-route-table
			variable "public_route_table_tags" {
				default     = {}
			}	
    -- similarly, create route-table-tags for private and database 		   
    }
    --terraform plan 
	--terraform apply -auto-approve
       
	-->{step:6.1 (Creating routes for public, private and database subnets)

		--ref-link: ( https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/route)
        --The public route has to connect to the internet gateway
		--add the below resource to ( terraform-aws-vpc folder/main.tf)
		  # Routes
		   # public route
				resource "aws_route" "public" {
					route_table_id            = aws_route_table.public.id
					destination_cidr_block    = "0.0.0.0/0"
					gateway_id = aws_internet_gateway.main.id
				}
		--For private and database connect to internet through NAT Gateway ,
		--so add below resource to (terraform-aws-vpc folder/main.tf)
		  # private route
				resource "aws_route" "private_nat" {
					route_table_id            = aws_route_table.private.id
					destination_cidr_block    = "0.0.0.0/0"
					nat_gateway_id = aws_nat_gateway.main.id
				}
		--Similarly do for database.
	   }
	 --terraform plan 
	 --terraform apply -auto-approve

    -->{step:6.2 (Creating route table association with subnet) 

		--ref-link:(https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/route_table_association)
        
		--we have 1 public route table and 2 public subnets, 
		--we need these subnets into route public route_table using the below resource in (terraform-aws-vpc/main.tf)

	     #public route-table association
		 resource "aws_route_table_association" "public" {
			count= length(var.public_subnet_cidrs)
			subnet_id      = aws_subnet.public[count.index].id
			route_table_id = aws_route_table.public.id
		  }
	    
		--similarly do for private , database  
	   }
	--terraform init -reconfigure   
	--terraform plan 
	--terraform apply -auto-approve


{
common tags --> common for all resources under this project
resource tags --> vpc_tags

vpc --> expense-dev

HA --> atleast 2 AZ

public --> 1a, 1b --> 10.0.1.0/24, 10.0.2.0/24
private --> 1a, 1b --> 10.0.11.0/24, 10.0.12.0/24
database --> 1a,1b --> 10.0.21.0/24, 10.0.22.0/24

1. get the AZ
2. get first 2

0,1 --> only 0th element
0,2 --> 0th element, 1st element

expense-dev-public-us-east-1a

we need to create database_subnet_group --> all database subnets under a group

}
