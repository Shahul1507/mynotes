(terraform-aws-vpc)
-------------------

{ main.tf
  -------  
  #VPC
resource "aws_vpc" "main" {
  cidr_block           = var.vpc_cidr_block
  enable_dns_hostnames = var.dns_hostname

  tags = merge(
    var.common_tags,
    var.vpc_tags,
    {
      Name = local.resource_name
    }
  )
}

# internet gateway
resource "aws_internet_gateway" "main" {
  vpc_id = aws_vpc.main.id   # associated to vpc id

  tags = merge (
     var.common_tags,
     var.igw_tags,
     {
      Name = local.resource_name
     }
  )   
  
}

# public subnet

resource "aws_subnet" "public" {
  count = length(var.public_subnet_cidrs)
  vpc_id     = aws_vpc.main.id
  cidr_block = var.public_subnet_cidrs[count.index]
  availability_zone = local.az_names[count.index]
  map_public_ip_on_launch = true
  tags = merge(
    var.common_tags,
    var.public_subnet_tags,
    {
        Name = "${var.project_name}-public-${local.az_names[count.index]}" #expense-dev-public-us-east-1a 
    }
  )
}


# private subnet

resource "aws_subnet" "private" {
  count = length(var.private_subnet_cidrs)
  vpc_id     = aws_vpc.main.id
  cidr_block = var.private_subnet_cidrs[count.index]
  availability_zone = local.az_names[count.index]

  tags = merge(
    var.common_tags,
    var.private_subnet_tags,
    {
        Name = "${var.project_name}-private-${local.az_names[count.index]}" #expense-dev-private-us-east-1a 
    }
  )
}

# database subnet

resource "aws_subnet" "database" {
  count = length(var.database_subnet_cidrs)
  vpc_id     = aws_vpc.main.id
  cidr_block = var.database_subnet_cidrs[count.index]
  availability_zone = local.az_names[count.index]

  tags = merge(
    var.common_tags,
    var.database_subnet_tags,
    {
        Name = "${var.project_name}-database-${local.az_names[count.index]}" #expense-dev-database-us-east-1a 
    }
  )
}

# DB Subnet group for RDS
resource "aws_db_subnet_group" "default" {
  name       = local.resource_name
  subnet_ids = aws_subnet.database[*].id # [*] takes the subnets of all database subnets

  tags = merge(
    var.common_tags,
    var.db_subnet_group_tags,
    {
        Name = local.resource_name
    }
  )
}

# elastic_ip for NAT
resource "aws_eip" "vpc" {
  domain   = "vpc"

  tags = merge(
    var.common_tags,
    var.eip_tags,
    {
        Name = local.resource_name
    }
  ) 
}

# NAT gateway
resource "aws_nat_gateway" "main" {
  allocation_id = aws_eip.vpc.id
  subnet_id     = aws_subnet.public[0].id #first subnet

  tags = merge(
    var.common_tags,
    var.nat_gateway_tags,
    {
        Name = local.resource_name
    }
  )

  # To ensure proper ordering, it is recommended to add an explicit dependency
  # on the Internet Gateway for the VPC.
  depends_on = [aws_internet_gateway.main]
}

# Public route table
resource "aws_route_table" "public" {
  vpc_id = aws_vpc.main.id

  tags = merge(
    var.common_tags,
    var.public_route_table_tags,
    {
      Name = "${local.resource_name}-public" #expense-dev-public
    }
  )
  
}

# Private route table
resource "aws_route_table" "private" {
  vpc_id = aws_vpc.main.id

  tags = merge(
    var.common_tags,
    var.private_route_table_tags,
    {
      Name = "${local.resource_name}-private" #expense-dev-private
    }
  )
  
}

# database route table
resource "aws_route_table" "database" {
  vpc_id = aws_vpc.main.id

  tags = merge(
    var.common_tags,
    var.database_route_table_tags,
    {
      Name = "${local.resource_name}-database" #expense-dev-database
    }
  )
  
}

 # Routes
  # public
  resource "aws_route" "public" {
    route_table_id            = aws_route_table.public.id
    destination_cidr_block    = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.main.id
  }

  # private
  resource "aws_route" "private" {
    route_table_id            = aws_route_table.private.id
    destination_cidr_block    = "0.0.0.0/0"
    nat_gateway_id = aws_nat_gateway.main.id
  }

  # database
  resource "aws_route" "database" {
    route_table_id            = aws_route_table.database.id
    destination_cidr_block    = "0.0.0.0/0"
    nat_gateway_id = aws_nat_gateway.main.id
  }

  #public route-table association
		 resource "aws_route_table_association" "public" {
			count= length(var.public_subnet_cidrs)
			subnet_id      = aws_subnet.public[count.index].id
			route_table_id = aws_route_table.public.id
		  }
	   
 
  #private route-table association
		 resource "aws_route_table_association" "private" {
			count= length(var.private_subnet_cidrs)
			subnet_id      = aws_subnet.private[count.index].id
			route_table_id = aws_route_table.private.id
		  }   

  
  #database route-table association
		 resource "aws_route_table_association" "database" {
			count= length(var.database_subnet_cidrs)
			subnet_id      = aws_subnet.database[count.index].id
			route_table_id = aws_route_table.database.id
		  }   
}      

{ data.tf
  -------
  # Declare the data source
data "aws_availability_zones" "available" {
  state = "available"
}

# # e.g., Create subnets in the first two available availability zones

# resource "aws_subnet" "primary" {
#   availability_zone = data.aws_availability_zones.available.names[0]

#   # ...
# }

# resource "aws_subnet" "secondary" {
#   availability_zone = data.aws_availability_zones.available.names[1]

#   # ...
# }

}

{ variable.tf
 -----------
 #mandatory
variable "vpc_cidr_block" {
  default = "10.0.0.0/16"
}
variable "dns_hostname" {
  default = true
}
variable "project_name" {
  type = string
}

variable "environment" {
  type = string
}

#optional

variable "common_tags" {
  default = {}
}

variable "vpc_tags" {
  default = {}
}

variable "igw_tags" {
  default     = {}
}
#public subnet
variable "public_subnet_cidrs"{
    type = list
    validation {
        condition = length(var.public_subnet_cidrs) == 2
        error_message = "Please provide 2 valid public subet CIDR"
    }
}

variable "public_subnet_tags"{
    default = {}
}

#private subnet
variable "private_subnet_cidrs"{
    type = list
    validation {
        condition = length(var.private_subnet_cidrs) == 2
        error_message = "Please provide 2 valid private subet CIDR"
    }
}

variable "private_subnet_tags"{
    default = {}
}

#database subnet
variable "database_subnet_cidrs"{
    type = list
    validation {
        condition = length(var.database_subnet_cidrs) == 2
        error_message = "Please provide 2 valid database subet CIDR"
    }
}

variable "database_subnet_tags"{
    default = {}
}

# db subnet group tags
variable "db_subnet_group_tags" {
  default     = {}
}
 # nat_gateway_tags
variable "nat_gateway_tags" {
  default     = {}
}
# public-route-table
variable "public_route_table_tags" {
  default     = {}
}

# private-route-table
variable "private_route_table_tags" {
  default     = {}
}

# database-route-table
variable "database_route_table_tags" {
  default     = {}
}
 
}

{locals.tf
  --------
  locals {
    resource_name = "${var.project_name}-${var.environment}"
  
  }
  locals{
    az_names = slice(data.aws_availability_zones.available.names, 0, 2)
  
  }  
}

{output.tf
 --------
#vpc 
output "vpc_id" {
  value = aws_vpc.main.id
}
#avaliability zone 
 output "az_info" {
      value = data.aws_availability_zones.available
 }
}


(vpc-module-test)
-------------------
{ vpc.tf
  ------
  module "vpc" {
    source                = "../terraform-aws-vpc"
    project_name          = var.project_name
    environment           = var.environment
    common_tags           = var.common_tags
    public_subnet_cidrs   = var.public_subnet_cidrs
    private_subnet_cidrs  = var.private_subnet_cidrs
    database_subnet_cidrs = var.database_subnet_cidrs
    is_peering_required   = var.is_peering_required #(true in variables)
  
  }

}

{ variable.tf
  -----------
  variable "project_name" {
    default = "expense"
  }
  
  variable "environment" {
    default = "dev"
  }
  
  variable "common_tags" {
    default = {
      Project     = "expense"
      Terraform   = "true"
      Environment = "dev"
    }
  }
  
  variable "public_subnet_cidrs" {
    default = ["10.0.1.0/24", "10.0.2.0/24"]
  }
  
  variable "private_subnet_cidrs" {
    default = ["10.0.11.0/24", "10.0.12.0/24"]
  }
  variable "database_subnet_cidrs" {
    default = ["10.0.21.0/24", "10.0.22.0/24"]
  }
}

{ output.tf
  ---------
  #vpc
output "vpc_id" {
  value = module.vpc.vpc_id

}
# avaliability zone
 output "az_info" {
      value = module.vpc.az_info
 }


}