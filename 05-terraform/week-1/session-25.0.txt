								------------- 
								| TERRAFORM |  
								-------------
								    DAY-4
							    -------------		
								| CONTENTS	|
								-------------	
                    --->     Recap (expense-1)
					--->     locals
					--->     state
					--->     remote state
					--->     locking

Note link: (https://vijaycodes.hashnode.dev/fundamentals-of-terraform#heading-terraform-locals)

expense-1
---------
1. 3 ec2
2. 3 r53 records
	backend.daws81s.online --> t3.micro
	mysql.daws81s.online --> t3.small
	daws81s.online --> t3.micro
condition syntax:
------------------	
expression ? "true" : "false"

r53
-----
we should get the output of ec2 instanced created
aws_instance.terraform

Interpolation
-------------
A ${ ... } sequence is an interpolation, which evaluates the expression given between the markers, converts the result to a string if necessary, and then inserts it into the final string:

"Hello, ${var.name}!"

In the above example, the named object var.name is accessed and its value inserted into the string, producing a result like "Hello, Juan!".

"${var.instance_names[count.index]}.${var.domain_name}"

backend.daws81s.online
var.instance_names = backend
domain_name = daws81s.online

terraform  fmt  ---   Reformat your configuration in the standard style
--------
LOCALS |
--------
note link: (https://vijaycodes.hashnode.dev/fundamentals-of-terraform#heading-terraform-locals)
	locals are like variables but it have some extra capabilities. You can store expressions and intermediate values in locals

	variables can be overriden
	but we can't override locals

	comparison variable & locals
	----------------------------
		1. variables and locals both can store values, but locals have some extra capabilities
		2. locals can store expressions, terraform can run them and get the value
		3. locals can use variables inside. variables can't refer locals
		4. can override variables, can't override locals
		5. (count.index) will not work in locals,we need to use variables for it
	Steps: (terraform/locals)
    ------							
	---> create folder under terraform in workspace(vs code)
						terraform 
						- locals
						  -locals.tf
						  -variables.tf
					      -data.tf
						  -ec2.tf
						  -r53.tf
						  -provider.tf (it should be present in all folders)
						  -output.tf
						  						 
	--> terraform init
	--> terraform plan
	--> terraform apply -auto-approve 					  	
---------------------------------
STATE, REMOTE STATE AND LOCKING | 
---------------------------------
note link:(https://vijaycodes.hashnode.dev/fundamentals-of-terraform#heading-state-remote-state-locking)
	-->If need to change the instance name from(mysql --> mysqllll)
	-->it is a simple name update, but ansible created another instance
	-->in terraform,it just overwrites the changes instead of creating the new instance

	declared infra, actual infra

	terraform == declarative way of creating infra

		tf files == infra I declared
		aws infra == actual infra created

	declared infra == actual infra

	terraform.tfstate == terraform keeps track of what it created 

	aws_security_group.allow_ssh_terraform: Refreshing state... [id=sg-0994f93b69e9e3736]

	before I delete
	----------------
	declared infra == actual infra --> true

	After I delete
	----------------
	declared infra == actual infra --> false

	terraform.tfstate --> instance created
	real infra --> no, actually destroyed
	config files --> create the infra

	terraform.tfstate will be refereshed against real infra

-------------
remote state | (interview)
-------------

	If multiple people working on same project collaboratively , If one person trying to create a infra and same time another person with same details trying to create infra it will duplicates infra or create errors.	
										 ----------------
						 --------------> | REMOTE STATE | <--------
						|                ----------------          |
						|                       |                  |
					 -------             ---------------        --------- 
					|laptop1|            | aws account |       | laptop2 |
					 -------             ---------------	    ---------				
	If remote state is maintained , if one person already created the infra in AWS then when another person trying to create with same details , remote state will update that infra is already created
	
--------	
locking: 
--------
.lock --> programs will check if any .lock file is there in local, it will not allow others to edit 
 
 Terraform acquires a state lock to protect the state from being written by multiple users at the same time.
  giving the error:
  -----------------

			│ Error: Error acquiring the state lock
			│
			│ Error message: Failed to read state file: The state file could not be read:
			│ read terraform.tfstate: The process cannot access the file because another
			│ process has locked a portion of the file.
			│
			│ Terraform acquires a state lock to protect the state from being written
			│ by multiple users at the same time. Please resolve the issue above and try
			│ again. For most commands, you can disable locking with the "-lock=false"
			│ flag, but this is not recommended.
			╵
	 -->every local will have .state file,which will be locked while its in use .Others, cannot    run it at the same time.
	 --> to over come this, remote locking concept
 This can be done in aws through:
 --------------------------------
	-->remote storage --> s3 bucket
	-->locking --> dynamo DB --> LockID

steps:
-----
--> remote state: (https://developer.hashicorp.com/terraform/language/state/remote:

-->In AWS —> search “dynamo DB” —> Click Tables —> enter table name —> In partition key enter 
  “LockID” —> click create table.

-->In AWS —> search “S3” —> Click create bucket —> Enter name —> Click create bucket.

-->In Expense project , we have to make changes in provider.tf that state information should have
   to save in remote place.

-->Google Search “Terraform remote state S3” —>
   https://developer.hashicorp.com/terraform/language/backend/s3

-->Update provider.tf
         example: terraform {
					  backend "s3" {
						bucket = "mybucket"
						key    = "path/to/my/key"
						region = "us-east-1"
						dynamodb_table = "table name"
					  }
					}




