                                ------------- 
                                | TERRAFORM |  
                                -------------
                                    DAY-3
                                -------------		
                                | CONTENTS	|
                                -------------	
                    --->     TERRAFORM DATASOURCES

Note link: (https://vijaycodes.hashnode.dev/fundamentals-of-terraform)

Top to Bottom Approach
----------------------
1. What is the problem? --> Manual infra
2. How terraform is solving? --> Through script, Infra as a Code
3. Apply

Resources, Providers

1. faster releases
2. less defects

1. AWS Resource/Service How it works
2. It needs some input/arguments
3. Providers will give us outputs

ps -ef | grep ssh

4. Use those outputs and create other resources

variables, data types, conditions, loops and functions

1. 3 ec2 instances
2. 3 r53 records

created resources, get the outputs and create other resources

AMI ID frequently changes...whenever you update something in AMI, ID will changes

You can query existing info from the providers. this is possible data sources.

Backend API --> creating records(POST), getting data(GET)

search the product, apply the filters --> this is query

devops-practice, rhel-9, apply other filters too


------------
DATASOURCES| (https://registry.terraform.io/providers/hashicorp/aws/latest/docs/data-sources/ami)
------------
In the resource code, the ami id is hardcoded but the ami id will change whenever there is any image change. using datasources we can query AWS and get the information.

Steps: (terraform/datasources)
------							
---> create folder under terraform in workspace(vs code)
					terraform 
					- datasources
					  -ec2.tf
					  -provider.tf (it should be present in all folders)
					  -output.tf
					  -data.tf

--> terraform init
--> terraform plan
--> terraform apply -auto-approve 					  
                            --------
                            | CODE |
                            --------

data.tf
--------
data "aws_ami" "joindevops" {

	most_recent      = true
	owners = ["973714476881"] #owner account ID
	
	filter {
		name   = "name"
		values = ["RHEL-9-DevOps-Practice"]
	}
	
	filter {
		name   = "root-device-type"
		values = ["ebs"]
	}

   filter {
	name   = "virtualization-type"
	values = ["hvm"]
   }
}

ec2.tf
------
resource "aws_security_group" "allow_ssh_terraform" {
    name = "allow_sshh" # allow_ssh is already present in my aws account
    description = "allow port number 22 for SSH access"

    egress {
        from_port        = 0
        to_port          = 0
        protocol         = "-1" # -1 means all
        cidr_blocks      = ["0.0.0.0/0"]
        ipv6_cidr_blocks = ["::/0"]
    }

    ingress {
        from_port        = 22
        to_port          = 22
        protocol         = "tcp"
        cidr_blocks      = ["0.0.0.0/0"] # allow from everyone
        ipv6_cidr_blocks = ["::/0"]
    }

    
    tags = {
        Name = "allow_sshh"
    }
}

resource "aws_instance" "terraform" {

  ami = data.aws_ami.joindevops.id
  instance_type = "t3.micro"
  vpc_security_group_ids = [aws_security_group.allow_ssh_terraform.id]
  tags = {
    Name = "terraform"
  }
}

output.tf
----------

output "ami_id" {
  value       = data.aws_ami.joindevops.id
  
}
all recent AMI from joindevops with name RHEL-9-DevOps-Practice

inputs --> args to create resources
outputs --> after creation of resource. Public IP, private IP, instance ID, etc.
data sources  --> instead of getting args manually, you can query existing information


