multi environment by tfvars
---------------------------
-->providers.tf
  -------------
        terraform {
            required_providers {
            aws = {
                source  = "hashicorp/aws"
                version = "5.67.0"
            }
            }
        
            backend "s3" {
            }
        }
        provider "aws" {
            # Configuration options
            region = "us-east-1"
        } 
   -------     
-->tfvars:
   -------
     -->dev
        ----
        backend.tf
        ----------
            bucket = "81s-remote-bucket-dev"
            key    = "remote-state-demo-dev"
            region = "us-east-1"
            dynamodb_table = "81s-locking-dev"
  
        dev.tfvars
        ----------
            instances = {
                mysql-dev = "t3.small"
                backend-dev = "t3.micro"
                frontend-dev = "t3.micro"
            }
            
            tags = {
                Environmrnt = "dev"
            }
            
            environment = "dev"
     -->prod
        ----
        backend.tf
        ----------
            bucket = "81s-remote-bucket-prod"
            key    = "remote-state-demo-prod"
            region = "us-east-1"
            dynamodb_table = "81s-locking-prod"

        prod.tfavrs
        -----------
        instances = {
            mysql-prod    = "t3.small"
            backend-prod  = "t3.micro"
            frontend-prod = "t3.micro"
          }
          
          tags = {
            Environmrnt = "prod"
          }
          
          environment = "prod"

   -------------
-->varaiables.tf 
   -------------
        variable "instances" {
            type = map(any)
            # default     = {
            # # key =Value
            #  mysql = "t3.small"
            #  backend = "t3.micro"
            #  frontend = "t3.micro" 
        }
        
        variable "domain_name" {
            default = "shahul.online"
        }
        variable "zone_id" {
            default = "Z06321023RSPR3MPYN5JW" # r53 zone id from hosted zones
        }
        
        variable "common_tags" {
            default = {
            project   = "expense"
            Terraform = "true"
            }
        
        }
        variable "tags" {
            type = map(any)
        }
        
        variable "environment" {
        }

   --------
--> ec2.tf :        
   --------
        resource "aws_instance" "expense" {
            for_each = var.instances # this variable is map
            # for_each will give us a special variable with name each
            ami                    = "ami-09c813fb71547fc4f" # this AMI ID may change over the time
            instance_type          = each.value
            vpc_security_group_ids = [aws_security_group.allow_ssh_terraform.id]
            tags = merge(
            var.common_tags,
            var.tags,
            {
                Name = each.key
            }
            )
        
        }
        
        resource "aws_security_group" "allow_ssh_terraform" {
            name        = "allow_ssh_${var.environment}" # allow_ssh is already present in my aws account
            description = "allow port number 22 for SSH access"
        
            egress {
            from_port        = 0
            to_port          = 0
            protocol         = "-1" # -1 means all
            cidr_blocks      = ["0.0.0.0/0"]
            ipv6_cidr_blocks = ["::/0"]
            }
        
            ingress {
            from_port        = 22
            to_port          = 22
            protocol         = "tcp"
            cidr_blocks      = ["0.0.0.0/0"] # allow from everyone
            ipv6_cidr_blocks = ["::/0"]
            }
        
        
            tags = merge(
            var.common_tags,
            var.tags,
            {
                Name = "allow_ssh_${var.environment}"
        
            }
            )
        
        
        }
   --------
-->r53.tf :
   --------
        resource "aws_route53_record" "expense" {
            for_each        = aws_instance.expense
            zone_id         = var.zone_id
            name            = each.key == "frontend-prod" ? var.domain_name : "${each.key}.${var.domain_name}"
            type            = "A"
            ttl             = 1
            records         = startswith(each.key, "frontend") ? [each.value.public_ip] : [each.value.private_ip] #startswith is function
            allow_overwrite = true
        }
  