===============
EXPENSE-PROJECT
===============
(Namespace to expense-project)

--> creating "expense-k8" repo in git-hub
--> clone the repo to local
--> creating "namespace.yaml" to expense-project in "expense-k8"
 
     namespace.yaml
     --------------
    apiVersion: v1
    kind: Namespace
    metadata:
    name: expense
    labels:
        project: expense
        environment: dev
 Steps:
 -----
     -- git clone to server (moba) 
     -- cd expense-k8
     -- kubectl apply -f namespace.yaml      

=======
 MYSQL |
=======  
{   
(Creating "MYSQL")  

--> creating "mysql" folder in "expense-k8"
--> creating "manifest.yaml" file in "mysql" folder 

( creating "deployment-set" to "mysql")
    --> Ref link for code -- (https://kubernetes.io/docs/concepts/workloads/controllers/deployment/)
    --> copy the "deployment" syntax-code in "manifest.yaml" file
    {
        manifest.yaml
        -------------- 
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: mysql   # add    
          namespace: expense  # add 
          labels:    # add    
            app: mysql
            tier: db
            project: expense
        spec:
          replicas: 1  # add 
          selector:
            matchLabels: # add 
              app: mysql 
              tier: db
              project: expense
          template:
            metadata:
              labels:   # add 
                app: mysql 
                tier: db
                project: expense
            spec:
              containers:
              - name: mysql   
                image: joindevops/mysql:v1      # image from docker-hub   
    
    (pushing to git-hub)
    -- git add . ; git commit -m "expense-k8"; git push origin main

    (pulling to workstation)--Mobaxterm
        -- git pull
        -- cd mysql
        -- kubectl apply -f manifest.yaml  
        -- kubectl get pods -n expense (syntax: kubectl get pods -n <name-space name> )          
           # mysql is running
        -- kubectl exec -it mysql <pod-name> -n expense -- bash   
           # mysql -u root -pExpenseApp@1
           # show databases;
           # use transactions;
           # show tables;
           # exit
    }   
    
( creating "service" to "mysql")
    --> Ref link for code -- (https://kubernetes.io/docs/concepts/services-networking/service/)
    --> copy the "service" syntax-code in "manifest.yaml" file
    {
        manifest.yaml
        -------------- 
        kind: Service
        apiVersion: v1
        metadata:
          name: mysql
          namespace: expense
        spec:
          selector:
            app: mysql
            tier: db
            project: expense
          ports:
          - name: mysql-port
            protocol: TCP
            port: 3306 # service port
            targetPort: 3306 # container port  
    
    (pushing to git-hub)
    -- git add . ; git commit -m "expense-k8"; git push origin main

    (pulling to workstation)--Mobaxterm
        -- git pull
        -- kubectl apply -f manifest.yaml  
        -- kubectl get svc -n expense (svc = service )          
           # shows "mysql" service 
    }      
}
========
BACKEND |
========  
{   
(Creating "BACKEND")  
--> creating "configmap" to backend
--> creating "backend" folder in "expense-k8"
--> creating "manifest.yaml" file in "backend" folder 
--> creating "service" to "backend"

( creating "configMap" to backend)
    --> Ref link for code -(https://kubernetes.io/docs/concepts/configuration/configmap/ )
    --> copy the "configMap" syntax-code in "manifest.yaml" file
    {
        manifest.yaml
        -------------
        apiversion: v1
        kind: configMap
        metadata:
          name: backend
          namespace: expense
        data:
          DB_HOST: mysql
    }
( creating "deployment-set" to "backend")
    --> Ref link for code -- (https://kubernetes.io/docs/concepts/workloads/controllers/deployment/)
    --> copy the "deployment" syntax-code in "manifest.yaml" file
    {
        manifest.yaml
        -------------- 
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: backend
          namespace: expense
          labels:
            app: backend
            tier: api
            project: expense
        spec:
          replicas: 2
          selector:
            matchLabels:
              app: backend
              tier: api
              project: expense
          template:
            metadata:
              labels:
                app: backend
                tier: api
                project: expense
            spec:
              containers:
              - name: backend
                image: joindevops/backend:v1
                envFrom:
                - configMapRef:
                    name: backend
         
    }   
    
( creating "service" to "backend")
    --> Ref link for code -- (https://kubernetes.io/docs/concepts/services-networking/service/)
    --> copy the "service" syntax-code in "manifest.yaml" file
    {
        manifest.yaml
        -------------- 
        kind: Service
        apiVersion: v1
        metadata:
          name: backend
          namespace: expense
        spec:
          selector:
            app: backend
            tier: api
            project: expense
          ports:
          - name: backend-port
            protocol: TCP
            port: 8080 # service port
            targetPort: 8080 # container port    
    
    (pushing to git-hub)
    -- git add . ; git commit -m "expense-k8"; git push origin main

    (pulling to workstation)--Mobaxterm
        -- git pull
        -- cd ../backend
        -- kubectl apply -f manifest.yaml  
        -- kubectl get pods -n 
        -- kubectl get svc
        -- kubectl logs <pod-name> -n expense 
    } 

( Install kubens )   
    {
        --> open-link: (https://github.com/ahmetb/kubectx) 
        --> run below 3 links: (under ec2-user)
            -- sudo git clone https://github.com/ahmetb/kubectx /opt/kubectx
            -- sudo ln -s /opt/kubectx/kubectx /usr/local/bin/kubectx
            -- sudo ln -s /opt/kubectx/kubens /usr/local/bin/kubens   
    }

( creating "debug" to "backend")    

    {
       --> create a pod with name "manifest.yaml"
       --> copy "02-pod.yaml" to "manifest.yaml"

                manifest.yaml
                -------------
                apiVersion: v1
                kind: Pod
                metadata:
                  name: debug
                  namespace: expense
                spec:
                  containers:
                  - name: debug
                    image: joindevops/debug:v1
        (pushing to git-hub)
           -- cd ../expense-k8
           -- git add . ; git commit -m "expense-k8"; git push origin main
    
        (pulling to workstation)--Mobaxterm
            -- git pull
            -- cd debug
            -- kubectl apply -f manifest.yaml  # pod debug is created
            -- kubectl get pods
            -- kubectl exec -it debug -- bash
               # telnet mysql 3306 
               # telnet backend 8080
               # curl http://backend:8080/health
               # exit
        

                 
    }
}
=========
FRONTEND |
=========
{
  
    (Creating "BACKEND")  
    --> creating "frotend" folder in "expense-k8"
    --> creating "manifest.yaml" file in "frontend" folder 
    --> creating "service" to "frontend"   

    ( creating "deployment-set" to "frontend")
    --> Ref link for code -- (https://kubernetes.io/docs/concepts/workloads/controllers/deployment/)
    --> copy the "deployment" syntax-code in "manifest.yaml" file
    {
        manifest.yaml
        -------------- 
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: frontend
          namespace: expense
          labels:
            app: frontend
            tier: web
            project: expense
        spec:
          replicas: 2
          selector:
            matchLabels:
              app: frontend
              tier: web
              project: expense
          template:
            metadata:
              labels:
                app: frontend
                tier: web
                project: expense
            spec:
              containers:
              - name: frontend
                image: joindevops/frontend:v1
         
    }   
    
( creating "service" to "frontend")
    --> Ref link for code -- (https://kubernetes.io/docs/concepts/services-networking/service/)
    --> copy the "service" syntax-code in "manifest.yaml" file
    {
        manifest.yaml
        -------------- 
        kind: Service
        apiVersion: v1
        metadata:
          name: frontend
          namespace: expense
        spec:
          selector:
            type: LoadBalancer #add
            app: frontend
            tier: web
            project: expense
          ports:
          - name: frontend-port
            protocol: TCP
            port: 80 # service port
            targetPort: 80 # container port   

    (pushing to git-hub)
        -- git add . ; git commit -m "expense-k8"; git push origin main

    (pulling to workstation)--Mobaxterm
        -- git pull
        -- cd ../frontend
        -- kubectl apply -f manifest.yaml  
        -- kubectl get pods -n expense
        -- kubectl get svc -n expense
        -- kubectl logs <pod-name> -n expense 
           # we see,
             -- mysql,backend,frontend -> running 
             -- we see load balancer "url"
    } 

    --> aws - loadbalancers -- url is present

(allowing traffic in security-groups)

    --> aws - security-groups - edit inbound rules
        -- type: all traffic
        -- source: anywhere(0.0.0.0/0)
        -- save rules
    --> run the url with "http" in browser
    --> check expense-app #make sure its running

(Now adding "url" to "route-53"- hostedzones)   
    --> route-53 - hostedzones - shahul.online - create record 
        -- Record name: shahul.online
        -- Record type : A
        -- load balancer
        -- us-east-1
        -- load balancer url
        -- save
    --> login with "shahul.online"  in browser  
    --> check expense-app #make sure its running 
         

} 
    
After project is executed - delete the eks cluster
-- eksctl delete cluster --config-file=eks.yaml